#!/bin/bash

# options: make, make afl, make klee
# clean options: clean, clean afl, clean klee

AFL_DIR="afl-build"
KLEE_DIR="klee-build"

# Build with afl-gcc (afl)
function make_afl {
	echo "make afl"
#	mkdir $AFL_DIR
#	cd $AFL_DIR
	cmake . -DCMAKE_CXX_COMPILER=afl-clang++ -DCMAKE_C_COMPILER=afl-clang
	make
	cd ..
}

function clean_afl {
	echo "rm -r $AFL_DIR"
	rm -r $AFL_DIR
}


# Build with wllvm (klee)
function make_klee {
	echo "make klee"
	export LLVM_COMPILER=clang	# Export clang as compiler for wllvm
	
	#mkdir $KLEE_DIR
	#cd $KLEE_DIR
	# -g : Generate source level debug information
	#CC=wllvm CXX=wllvm++ CFLAGS=-g ../configure
	cmake . -DCMAKE_CXX_COMPILER=wllvm++ -DCMAKE_C_COMPILER=wllvm -DCMAKE_C_FLAGS=-g

	make
	
	FILES=$PWD"/*"
	for file in $(find);
	do
		# create bytecode from all executeable file found
		if [[ -x "$file" ]] 
		then
    		echo "try create bytecode from '$file' (because executable)"
    		extract-bc $file
    	fi;
	done
	cd ..
}

function clean_klee {
	echo "rm -r $KLEE_DIR"
	rm -r $KLEE_DIR
}

function clean_all {
	clean_afl
	clean_klee
 	make clean
 	exit
}

if [[ $# == 1 ]]; then
	echo "try: make, make afl, make klee"
	echo "or:  clean, clean afl, clean klee"
fi;

if [[ $# == 1 ]]; then
	if [[ $1 == "make" ]]; then
		echo "make all"
		make_afl
		make_klee
		exit
	fi;
	if [[ $1 == "clean" ]]; then
		echo "clean all"
		clean_all
		exit
	fi
fi;

if [[ $# == 2 ]]; then	
	if [[ $1 == "make" ]]; then
		if [[ $2 == "afl" ]]; then
			echo "make afl"
			make_afl
		fi;
		if [[ $2 == "klee" ]]; then
			echo "make klee"
			make_klee
		fi;
		exit
	fi;

	if [[ $1 == "clean" ]]; then
		if [[ $2 == "afl" ]]; then
			printf "clean afl: "
			clean_afl
		fi;
		if [[ $2 == "klee" ]]; then
			printf "clean klee: "
			clean_klee
		fi;
		exit
	fi;

fi;
